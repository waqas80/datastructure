One simple way to encrypt a string is to "rotate" every alphanumeric character by a certain amount. Rotating a character means replacing it with another character that is a certain number of steps away in normal alphabetic or numerical order.
For example, if the string "Zebra-493?" is rotated 3 places, the resulting string is "Cheud-726?". Every alphabetic character is replaced with the character 3 letters higher (wrapping around from Z to A), and every numeric character replaced with the character 3 digits higher (wrapping around from 9 to 0). Note that the non-alphanumeric characters remain unchanged.
Given a string and a rotation factor, return an encrypted string.
Signature
string rotationalCipher(string input, int rotationFactor)
Input
1 <= |input| <= 1,000,000
0 <= rotationFactor <= 1,000,000
Output
Return the result of rotating input a number of times equal to rotationFactor.
Example 1
input = Zebra-493?
rotationFactor = 3
output = Cheud-726?
Example 2
input = abcdefghijklmNOPQRSTUVWXYZ0123456789
rotationFactor = 39
output = nopqrstuvwxyzABCDEFGHIJKLM9012345678


using System;

// We don’t provide test cases in this language yet, but have outlined the signature for you. Please write your code below, and don’t forget to test edge cases!
public class RotationalCipher {
  static void Main(String[] args) {
    // Call rotationalCipher with test cases here
    Console.WriteLine(rotationalCipher("Zebra-493?",3));
    
    Console.WriteLine(rotationalCipher("abcdefghijklmNOPQRSTUVWXYZ0123456789",39));
    
    Console.ReadLine();
    
  }
  
  private static string rotationalCipher(String input, int rotationFactor) {
    
    string strRotate = String.Empty;
    
    foreach(char ch in input){
      if(!Char.IsLetterOrDigit(ch))
        strRotate += ch;
      else if(Char.IsLetter(ch))
        strRotate += RotateChar(ch,rotationFactor);
      else if(Char.IsDigit(ch))
        strRotate += RotateNum(ch,rotationFactor);
    }
    
    return strRotate;
  }
  
  private static char RotateChar(char input, int shiftKey){
    char firstLetter = char.IsUpper(input) ? 'A' : 'a';
    int nextLetter = firstLetter + (input - firstLetter + shiftKey) % 26;
    return (char)nextLetter;
  }
  
  private static char RotateNum(char input, int shiftKey){
    int tempNum = Int32.Parse(Convert.ToString(input));
    tempNum = (tempNum + shiftKey) % 10;
    return tempNum.ToString()[0];
  }
}
