In this problem, you are given an integer N, and a permutation, P of the integers from 1 to N, denoted as (a_1, a_2, ..., a_N). You want to rearrange the elements of the permutation into increasing order, repeatedly making the following operation:
Select a sub-portion of the permutation, (a_i, ..., a_j), and reverse its order.
Your goal is to compute the minimum number of such operations required to return the permutation to increasing order.
Signature
int minOperations(int[] arr)
Input
Array arr is a permutation of all integers from 1 to N, N is between 1 and 8
Output
An integer denoting the minimum number of operations required to arrange the permutation in increasing order
Example
If N = 3, and P = (3, 1, 2), we can do the following operations:
Select (1, 2) and reverse it: P = (3, 2, 1).
Select (3, 2, 1) and reverse it: P = (1, 2, 3).
output = 2


using System;
using System.Collections.Generic;

public class Node{
	public String str;
	public int steps;
	
	public Node(String str,int steps)
        {
            this.str = str;
            this.steps= steps;
        }
}

public class Program
{
	public static void Main()
	{
		int[] a = new int[]{3, 1, 2};
		
		Console.WriteLine(minOperations(a));
		Console.ReadLine();
	}
	
	public static int minOperations(int[] arr){
		int arrSize = arr.Length;
		string start = "", destination = "";
		string original = "", modified = "";
		
		Node temp = null;
		
		for (int i = 0; i < arrSize; i++)
        start += arr[i];
		
		Array.Sort(arr);
        for (int i = 0; i < arrSize; i++)
            destination += arr[i];
		
		Queue<Node> q = new Queue<Node>();
		q.Enqueue(new Node(start, 0));
		
		if (start == destination)
            return 0;
		
		while (q.Count != 0)
        {
			temp = q.Dequeue();
			original = temp.str;
			 for (int j = 2; j <= arrSize; j++){
			 	modified = original;
				 modified = reverse(modified , j);
				 if (modified.Equals(destination)){
				 	return temp.steps + 1;
				 }
				 q.Enqueue(new Node(modified, temp.steps + 1));
			 }
		}
		return int.MinValue;
	}
	public static String reverse (String s, int index)
    {
        char []temp = s.ToCharArray();
        int i = 0;
        while (i < index)
        {
            char c = temp[i];
            temp[i] = temp[index - 1];
            temp[index - 1] = c;
            i++;index--;
        }
        return String.Join("", temp);
    }
}
